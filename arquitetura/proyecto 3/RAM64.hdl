// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load,sel=address[0..2],a=register1,b=register2,c=register3,d=register4,e=register5,f=register6,g=register7,h=register8);
    RAM8(in=in,load=register1,address=address[3..5],out=out1);
    RAM8(in=in,load=register2,address=address[3..5],out=out2);
    RAM8(in=in,load=register3,address=address[3..5],out=out3);
    RAM8(in=in,load=register4,address=address[3..5],out=out4);
    RAM8(in=in,load=register5,address=address[3..5],out=out5);
    RAM8(in=in,load=register6,address=address[3..5],out=out6);
    RAM8(in=in,load=register7,address=address[3..5],out=out7);
    RAM8(in=in,load=register8,address=address[3..5],out=out8);
    Mux8Way16(a=out1,b=out2,c=out3,d=out4,e=out5,f=out6,g=out7,h=out8,sel=address[0..2],out=out);
}